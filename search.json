[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to the Project","title":"Contributing to the Project","text":"Thank considering contributing project! contributions help improve project everyone. Please follow guidelines ensure smooth collaboration.","code":""},{"path":"/CONTRIBUTING.html","id":"id_-commit-message-guidelines","dir":"","previous_headings":"","what":"‚ú® Commit Message Guidelines","title":"Contributing to the Project","text":"project follows Conventional Commits specification. Please use following format making commits: Examples: - feat(api): add new endpoint fetching user data - fix(parser): correct error handling XML parsing - docs(readme): update installation instructions Common commit types: - feat: new feature - fix: bug fix - docs: Documentation changes - style: Code style changes (formatting, missing semi-colons, etc.) - refactor: Code refactoring without changing functionality - test: Adding updating tests - chore: Maintenance tasks (e.g., dependency updates)","code":"type(scope): description"},{"path":"/CONTRIBUTING.html","id":"id_-running-tasks","dir":"","previous_headings":"","what":"üî® Running Tasks","title":"Contributing to the Project","text":"project uses task runner defined Taskfile.yml. key tasks might need run development.","code":""},{"path":"/CONTRIBUTING.html","id":"cleaning-build-artifacts","dir":"","previous_headings":"üî® Running Tasks","what":"Cleaning Build Artifacts","title":"Contributing to the Project","text":"","code":"task clean"},{"path":"/CONTRIBUTING.html","id":"running-tests","dir":"","previous_headings":"üî® Running Tasks","what":"Running Tests","title":"Contributing to the Project","text":"Run tests: Run Rust-specific tests: Run R-specific tests:","code":"task test task test-rust task test-r"},{"path":"/CONTRIBUTING.html","id":"generating-documentation","dir":"","previous_headings":"üî® Running Tasks","what":"Generating Documentation","title":"Contributing to the Project","text":"","code":"task document"},{"path":"/CONTRIBUTING.html","id":"installing-the-project","dir":"","previous_headings":"üî® Running Tasks","what":"Installing the Project","title":"Contributing to the Project","text":"","code":"task install"},{"path":"/CONTRIBUTING.html","id":"checking-the-package","dir":"","previous_headings":"üî® Running Tasks","what":"Checking the Package","title":"Contributing to the Project","text":"","code":"task check"},{"path":"/CONTRIBUTING.html","id":"id_Ô∏è-submitting-a-contribution","dir":"","previous_headings":"","what":"üõ†Ô∏è Submitting a Contribution","title":"Contributing to the Project","text":"Fork repository. Create new branch descriptive name: Make changes commit using Conventional Commits. Push changes fork: Create Pull Request GitHub.","code":"git checkout -b feature/new-feature git push origin feature/new-feature"},{"path":"/CONTRIBUTING.html","id":"id_-review-process","dir":"","previous_headings":"","what":"‚úÖ Review Process","title":"Contributing to the Project","text":"PRs must pass automated tests merging. least one project maintainer must approve changes. Thank contribution! üöÄ","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 ixpantia SA Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/orbweaver.html","id":"build","dir":"Articles","previous_headings":"","what":"Build","title":"orbweaver","text":"graph_builder() initiates process building graph. add_edge() adds directed edge two nodes. add_path() adds path graph. build_directed() finalizes graph directed graph. populate_edges() populates edges graph data frame. build_acyclic() finalizes graph acyclic graph.","code":"graph <- graph_builder() |>   add_edge(from = \"a\", to = \"b\") |>   add_edge(from = \"a\", to = \"c\") |>   add_edge(from = \"b\", to = \"d\") |>   add_edge(from = \"c\", to = \"d\") |>   add_path(path = c(\"a\", \"b\", \"d\")) |>   build_directed() graph #> # of nodes: 4 #> # of edges: 4 #> # of roots: 1 #> # of leaves: 1 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | a               | b               | #> | a               | c               | #> | b               | d               | #> | c               | d               | edges <- data.frame(   parent = c(\"a\", \"a\", \"b\", \"c\"),   child = c(\"b\", \"c\", \"d\", \"d\") )  acyclic_graph <- graph_builder() |>   populate_edges(edges_df = edges, parent_col = parent, child_col = child) |>   build_acyclic() acyclic_graph #> # of nodes: 4 #> # of edges: 4 #> # of roots: 1 #> # of leaves: 1 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | a               | b               | #> | a               | c               | #> | b               | d               | #> | c               | d               |"},{"path":"/articles/orbweaver.html","id":"io","dir":"Articles","previous_headings":"","what":"i/o","title":"orbweaver","text":"graph_to_bin() writes graph file memory. graph_from_bin() reads graph file memory.","code":"file <- tempfile() graph_to_bin(graph, path = file) #> NULL graph_from_bin(path = file, type = \"directed\") #> # of nodes: 4 #> # of edges: 4 #> # of roots: 1 #> # of leaves: 1 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | a               | b               | #> | a               | c               | #> | b               | d               | #> | c               | d               |  bin <- graph_to_bin(graph) graph_from_bin(bin = bin, type = \"directed\") #> # of nodes: 4 #> # of edges: 4 #> # of roots: 1 #> # of leaves: 1 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | a               | b               | #> | a               | c               | #> | b               | d               | #> | c               | d               |"},{"path":"/articles/orbweaver.html","id":"explore","dir":"Articles","previous_headings":"","what":"Explore","title":"orbweaver","text":"has_children() checks whether node children. has_parents() checks whether node parents. subset() subsets graph include specific nodes. length() returns number nodes graph. nodes() returns nodes graph. children() returns children specific node graph. parents() returns parents specific node graph.","code":"has_children(graph, nodes = \"a\") #> [1] TRUE has_children(graph, nodes = \"d\") #> [1] FALSE has_parents(graph, nodes = \"a\") #> [1] FALSE has_parents(graph, nodes = \"d\") #> [1] TRUE subset(graph, nodes = c(\"a\", \"b\", \"d\")) #> # of nodes: 4 #> # of edges: 4 #> # of roots: 1 #> # of leaves: 1 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | a               | b               | #> | a               | c               | #> | b               | d               | #> | c               | d               | length(graph) #> [1] 4 nodes(graph) #> # of nodes: 4 #> |           Nodes           | #> |             a             | #> |             b             | #> |             c             | #> |             d             | children(graph, node = \"a\") #> # of nodes: 2 #> |           Nodes           | #> |             b             | #> |             c             | parents(graph, node = \"d\") #> # of nodes: 2 #> |           Nodes           | #> |             b             | #> |             c             |"},{"path":"/articles/orbweaver.html","id":"analyze","dir":"Articles","previous_headings":"","what":"Analyze","title":"orbweaver","text":"find_path() finds path two nodes. find_all_paths() finds paths two nodes. find_path_one_to_many() finds valid path one node multiple destinations directed graph. get_all_leaves() returns leaf nodes graph. get_all_roots() returns root nodes graph. get_leaves_under() returns leaf nodes specific node graph. get_roots_over() returns root nodes specific node graph. least_common_parents() returns least common parents set nodes graph.","code":"find_path(graph, from = \"a\", to = \"d\") #> # of nodes: 3 #> |           Nodes           | #> |             a             | #> |             b             | #> |             d             | find_all_paths(graph, from = \"a\", to = \"d\") #> [[1]] #> # of nodes: 3 #> |           Nodes           | #> |             a             | #> |             b             | #> |             d             | #>  #>  #> [[2]] #> # of nodes: 3 #> |           Nodes           | #> |             a             | #> |             c             | #> |             d             | find_path_one_to_many(acyclic_graph, from = \"a\", to = edges$child) #> [[1]] #> # of nodes: 2 #> |           Nodes           | #> |             a             | #> |             b             | #>  #>  #> [[2]] #> # of nodes: 2 #> |           Nodes           | #> |             a             | #> |             c             | #>  #>  #> [[3]] #> # of nodes: 3 #> |           Nodes           | #> |             a             | #> |             b             | #> |             d             | #>  #>  #> [[4]] #> # of nodes: 3 #> |           Nodes           | #> |             a             | #> |             b             | #> |             d             | get_all_leaves(graph) #> # of nodes: 1 #> |           Nodes           | #> |             d             | get_all_roots(graph) #> # of nodes: 1 #> |           Nodes           | #> |             a             | get_leaves_under(graph, node = \"a\") #> # of nodes: 1 #> |           Nodes           | #> |             d             | get_roots_over(graph, node = \"d\") #> # of nodes: 1 #> |           Nodes           | #> |             a             | least_common_parents(graph, selected = c(\"d\", \"c\")) #> # of nodes: 1 #> |           Nodes           | #> |             c             |"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"ixpantia, SRL. Copyright holder. Andres Quintero. Author, maintainer. authors dependency Rust crates. Contributor.           see inst/AUTHORS file details","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Quintero (2025). orbweaver: Fast Efficient Graph Data Structures. R package version 0.18.2, https://github.com/ixpantia/orbweaver-r.","code":"@Manual{,   title = {orbweaver: Fast and Efficient Graph Data Structures},   author = {Andres Quintero},   year = {2025},   note = {R package version 0.18.2},   url = {https://github.com/ixpantia/orbweaver-r}, }"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Additional details","title":"Authors and Citation","text":"","code":"The authors of the dependency Rust crates:"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Additional details","title":"Authors and Citation","text":"","code":"(version ):"},{"path":[]},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Fast and Efficient Graph Data Structures","text":"fast R library working Nodes graph.","code":""},{"path":"/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Fast and Efficient Graph Data Structures","text":"Find shortest paths nodes graph Find common parents selected nodes Directed Graph Directed Acyclic Graph quite fast","code":""},{"path":"/index.html","id":"why-not-igraph","dir":"","previous_headings":"","what":"Why not igraph?","title":"Fast and Efficient Graph Data Structures","text":"igraph amazing network analysis package. igraph much mature orbweaver focuses extreme performance low latency operations. need super high performance require weighted graphs, orbweaver may . may add weighted graph future short-term road map.","code":""},{"path":[]},{"path":"/index.html","id":"rust-toolchain","dir":"","previous_headings":"Installation","what":"Rust Toolchain","title":"Fast and Efficient Graph Data Structures","text":"installing package, need install Rust toolchain.","code":""},{"path":"/index.html","id":"mac-or-linux","dir":"","previous_headings":"Installation > Rust Toolchain","what":"Mac or Linux","title":"Fast and Efficient Graph Data Structures","text":"Mac Linux, can running following command terminal:","code":"curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh"},{"path":"/index.html","id":"windows","dir":"","previous_headings":"Installation > Rust Toolchain","what":"Windows","title":"Fast and Efficient Graph Data Structures","text":"Windows, can download installer . order compile package manually, need GNU ABI used GCC toolchain. default Windows, need install toolchain manually. can running following command terminal: Windows may need install Rtools well. can download installer .","code":"rustup toolchain install stable-gnu"},{"path":"/index.html","id":"r-package","dir":"","previous_headings":"Installation","what":"R Package","title":"Fast and Efficient Graph Data Structures","text":"can install orbweaver CRAN : can install orbweaver GitHub :","code":"install.packages(\"orbweaver\") # install.packages(\"remotes\") remotes::install_github(\"ixpantia/orbweaver-r\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Fast and Efficient Graph Data Structures","text":"","code":"library(orbweaver)  edges <- data.frame(   parent = c(\"A\", \"B\", \"C\", \"C\", \"F\"),   child  = c(\"B\", \"C\", \"D\", \"E\", \"D\") )  graph <- graph_builder() |>   populate_edges(edges, \"parent\", \"child\") |>   build_directed()  graph #> # of nodes: 6 #> # of edges: 5 #> # of roots: 2 #> # of leaves: 2 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | A               | B               | #> | B               | C               | #> | C               | E               | #> | C               | D               | #> | F               | D               |  graph |> find_all_paths(from = \"A\", to = \"D\") #> [[1]] #> # of nodes: 4 #> |           Nodes           | #> |             A             | #> |             B             | #> |             C             | #> |             D             |"},{"path":"/reference/add_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an edge to a graph builder ‚Äî add_edge","title":"Add an edge to a graph builder ‚Äî add_edge","text":"Adds edge one node another directed graph builder.","code":""},{"path":"/reference/add_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an edge to a graph builder ‚Äî add_edge","text":"","code":"add_edge(graph_builder, from, to)"},{"path":"/reference/add_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an edge to a graph builder ‚Äî add_edge","text":"graph_builder graph builder_object node. node.","code":""},{"path":"/reference/add_edge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an edge to a graph builder ‚Äî add_edge","text":"updated graph builder object","code":""},{"path":[]},{"path":"/reference/add_edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an edge to a graph builder ‚Äî add_edge","text":"","code":"graph_builder() |>   add_edge(\"A\", \"B\") #> <pointer: 0x55e2f62513d0> #> attr(,\"class\") #> [1] \"DirectedGraphBuilder\""},{"path":"/reference/add_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a path to a graph ‚Äî add_path","title":"Add a path to a graph ‚Äî add_path","text":"Adds edges make given path graph.","code":""},{"path":"/reference/add_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a path to a graph ‚Äî add_path","text":"","code":"add_path(graph_builder, path)"},{"path":"/reference/add_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a path to a graph ‚Äî add_path","text":"graph_builder graph builder_object path character vector describes path","code":""},{"path":"/reference/add_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a path to a graph ‚Äî add_path","text":"updated graph builder object","code":""},{"path":[]},{"path":"/reference/add_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a path to a graph ‚Äî add_path","text":"","code":"graph_builder() |>   add_path(c(\"A\", \"B\", \"C\")) #> <pointer: 0x55e2f6cece70> #> attr(,\"class\") #> [1] \"DirectedGraphBuilder\""},{"path":"/reference/build_acyclic.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a DirectedAcyclicGraph from a builder ‚Äî build_acyclic","title":"Build a DirectedAcyclicGraph from a builder ‚Äî build_acyclic","text":"Builds graph builder new DirectedAcyclicGraph object. NOTE: consume builder. leave empty builder place.","code":""},{"path":"/reference/build_acyclic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a DirectedAcyclicGraph from a builder ‚Äî build_acyclic","text":"","code":"build_acyclic(graph_builder)"},{"path":"/reference/build_acyclic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a DirectedAcyclicGraph from a builder ‚Äî build_acyclic","text":"graph_builder graph builder object","code":""},{"path":"/reference/build_acyclic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a DirectedAcyclicGraph from a builder ‚Äî build_acyclic","text":"DirectedAcyclicGraph Object","code":""},{"path":[]},{"path":"/reference/build_acyclic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a DirectedAcyclicGraph from a builder ‚Äî build_acyclic","text":"","code":"graph_builder() |>   add_path(c(\"1\", \"2\", \"3\", \"4\")) |>   build_acyclic() #> # of nodes: 4 #> # of edges: 3 #> # of roots: 1 #> # of leaves: 1 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | 1               | 2               | #> | 2               | 3               | #> | 3               | 4               | #>"},{"path":"/reference/build_directed.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a DirectedGraph from a builder ‚Äî build_directed","title":"Build a DirectedGraph from a builder ‚Äî build_directed","text":"Builds graph builder new DirectedGraph object. NOTE: consume builder. leave empty builder place.","code":""},{"path":"/reference/build_directed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a DirectedGraph from a builder ‚Äî build_directed","text":"","code":"build_directed(graph_builder)"},{"path":"/reference/build_directed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a DirectedGraph from a builder ‚Äî build_directed","text":"graph_builder graph builder object","code":""},{"path":"/reference/build_directed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a DirectedGraph from a builder ‚Äî build_directed","text":"DirectedGraph Object","code":""},{"path":[]},{"path":"/reference/build_directed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a DirectedGraph from a builder ‚Äî build_directed","text":"","code":"graph_builder() |>   add_path(c(\"1\", \"2\", \"3\", \"4\")) |>   build_directed() #> # of nodes: 4 #> # of edges: 3 #> # of roots: 1 #> # of leaves: 1 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | 1               | 2               | #> | 2               | 3               | #> | 3               | 4               | #>"},{"path":"/reference/children.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the children on a node ‚Äî children","title":"Get the children on a node ‚Äî children","text":"Get list node ids children provided node.","code":""},{"path":"/reference/children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the children on a node ‚Äî children","text":"","code":"children(graph, nodes)"},{"path":"/reference/children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the children on a node ‚Äî children","text":"graph graph object nodes character vector nodes find children ","code":""},{"path":"/reference/children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the children on a node ‚Äî children","text":"character vector","code":""},{"path":"/reference/children.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the children on a node ‚Äî children","text":"","code":"graph <- graph_builder() |>   add_edge(from = \"A\", to = \"B\") |>   build_directed()  graph |> children(\"A\") #> # of nodes: 1 #> |           Nodes           | #> |             B             | #>"},{"path":"/reference/find_all_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all paths between two nodes ‚Äî find_all_paths","title":"Find all paths between two nodes ‚Äî find_all_paths","text":"Find paths two nodes graph. graphs support function. Currently DirectedAcyclicGraph supports .","code":""},{"path":"/reference/find_all_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all paths between two nodes ‚Äî find_all_paths","text":"","code":"find_all_paths(graph, from, to)"},{"path":"/reference/find_all_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all paths between two nodes ‚Äî find_all_paths","text":"graph graph object starting node path ending node path","code":""},{"path":"/reference/find_all_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all paths between two nodes ‚Äî find_all_paths","text":"list character vectors","code":""},{"path":[]},{"path":"/reference/find_all_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all paths between two nodes ‚Äî find_all_paths","text":"","code":"graph <- graph_builder() |>   add_path(c(\"A\", \"B\", \"C\")) |>   add_path(c(\"A\", \"Z\", \"C\")) |>   add_path(c(\"A\", \"B\", \"A\")) |>   build_directed()  find_all_paths(graph, \"A\", \"C\") #> [[1]] #> # of nodes: 3 #> |           Nodes           | #> |             A             | #> |             B             | #> |             C             | #>  #>  #> [[2]] #> # of nodes: 3 #> |           Nodes           | #> |             A             | #> |             Z             | #> |             C             | #>  #>"},{"path":"/reference/find_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a path between two nodes ‚Äî find_path","title":"Find a path between two nodes ‚Äî find_path","text":"Finds path two nodes graph. Different types graphs use different algorithms find paths. DirectedGraph uses breadth-first search DirectedAcyclicGraph uses topological sort. path represented character vector node ids nodes make path.","code":""},{"path":"/reference/find_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a path between two nodes ‚Äî find_path","text":"","code":"find_path(graph, from, to)"},{"path":"/reference/find_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a path between two nodes ‚Äî find_path","text":"graph graph object starting node path ending node path","code":""},{"path":"/reference/find_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a path between two nodes ‚Äî find_path","text":"character vector","code":""},{"path":[]},{"path":"/reference/find_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a path between two nodes ‚Äî find_path","text":"","code":"graph <- graph_builder() |>   add_path(c(\"A\", \"B\", \"C\")) |>   build_directed()  find_path(graph, \"A\", \"C\") #> # of nodes: 3 #> |           Nodes           | #> |             A             | #> |             B             | #> |             C             | #>"},{"path":"/reference/find_path_one_to_many.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the a valid path from one node to many ‚Äî find_path_one_to_many","title":"Find the a valid path from one node to many ‚Äî find_path_one_to_many","text":"Find valid path one node many","code":""},{"path":"/reference/find_path_one_to_many.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the a valid path from one node to many ‚Äî find_path_one_to_many","text":"","code":"find_path_one_to_many(graph, from, to)"},{"path":"/reference/find_path_one_to_many.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the a valid path from one node to many ‚Äî find_path_one_to_many","text":"graph graph object starting node path character vector nodes","code":""},{"path":"/reference/find_path_one_to_many.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the a valid path from one node to many ‚Äî find_path_one_to_many","text":"list paths","code":""},{"path":[]},{"path":"/reference/find_path_one_to_many.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the a valid path from one node to many ‚Äî find_path_one_to_many","text":"","code":"edges <- data.frame(   parent = c(\"A\", \"A\", \"B\", \"Z\"),   child =  c(\"B\", \"Z\", \"Z\", \"F\") )  graph <- graph_builder() |>   populate_edges(edges, parent, child) |>   build_acyclic()  find_path_one_to_many(graph, \"A\", edges$child) #> [[1]] #> # of nodes: 2 #> |           Nodes           | #> |             A             | #> |             B             | #>  #>  #> [[2]] #> # of nodes: 2 #> |           Nodes           | #> |             A             | #> |             Z             | #>  #>  #> [[3]] #> # of nodes: 2 #> |           Nodes           | #> |             A             | #> |             Z             | #>  #>  #> [[4]] #> # of nodes: 3 #> |           Nodes           | #> |             A             | #> |             Z             | #> |             F             | #>  #>"},{"path":"/reference/get_all_leaves.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the leaf nodes of a graph ‚Äî get_all_leaves","title":"Get all the leaf nodes of a graph ‚Äî get_all_leaves","text":"Retrieves nodes graph children","code":""},{"path":"/reference/get_all_leaves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the leaf nodes of a graph ‚Äî get_all_leaves","text":"","code":"get_all_leaves(graph, ...)"},{"path":"/reference/get_all_leaves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the leaf nodes of a graph ‚Äî get_all_leaves","text":"graph graph object ... Unused","code":""},{"path":"/reference/get_all_leaves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the leaf nodes of a graph ‚Äî get_all_leaves","text":"character vector nodes","code":""},{"path":[]},{"path":"/reference/get_all_leaves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the leaf nodes of a graph ‚Äî get_all_leaves","text":"","code":"graph <- graph_builder() |>   add_path(c(\"A\", \"B\", \"C\")) |>   add_path(c(\"A\", \"D\", \"C\")) |>   add_path(c(\"Z\", \"B\", \"C\")) |>   add_path(c(\"Z\", \"B\", \"H\")) |>   build_directed()  get_all_leaves(graph) #> # of nodes: 2 #> |           Nodes           | #> |             C             | #> |             H             | #>"},{"path":"/reference/get_all_roots.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the all the root nodes of a graph ‚Äî get_all_roots","title":"Get the all the root nodes of a graph ‚Äî get_all_roots","text":"Retrieves nodes graph parents","code":""},{"path":"/reference/get_all_roots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the all the root nodes of a graph ‚Äî get_all_roots","text":"","code":"get_all_roots(graph, ...)"},{"path":"/reference/get_all_roots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the all the root nodes of a graph ‚Äî get_all_roots","text":"graph graph object ... Unused","code":""},{"path":"/reference/get_all_roots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the all the root nodes of a graph ‚Äî get_all_roots","text":"character vector nodes","code":""},{"path":[]},{"path":"/reference/get_all_roots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the all the root nodes of a graph ‚Äî get_all_roots","text":"","code":"graph <- graph_builder() |>   add_path(c(\"A\", \"B\", \"C\")) |>   add_path(c(\"A\", \"D\", \"C\")) |>   add_path(c(\"Z\", \"B\", \"C\")) |>   build_directed()  get_all_roots(graph) #> # of nodes: 2 #> |           Nodes           | #> |             A             | #> |             Z             | #>"},{"path":"/reference/get_leaves_under.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the leaf nodes of a graph under some nodes ‚Äî get_leaves_under","title":"Get the leaf nodes of a graph under some nodes ‚Äî get_leaves_under","text":"Retrieves nodes graph children certain node group nodes","code":""},{"path":"/reference/get_leaves_under.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the leaf nodes of a graph under some nodes ‚Äî get_leaves_under","text":"","code":"get_leaves_under(graph, nodes)"},{"path":"/reference/get_leaves_under.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the leaf nodes of a graph under some nodes ‚Äî get_leaves_under","text":"graph graph object nodes character vector nodes find leaves ","code":""},{"path":"/reference/get_leaves_under.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the leaf nodes of a graph under some nodes ‚Äî get_leaves_under","text":"character vector nodes","code":""},{"path":[]},{"path":"/reference/get_leaves_under.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the leaf nodes of a graph under some nodes ‚Äî get_leaves_under","text":"","code":"graph <- graph_builder() |>   add_path(c(\"A\", \"B\", \"C\")) |>   add_path(c(\"A\", \"D\", \"C\")) |>   add_path(c(\"Z\", \"B\", \"C\")) |>   add_path(c(\"Z\", \"B\", \"H\")) |>   build_directed()  get_leaves_under(graph, \"D\") #> # of nodes: 1 #> |           Nodes           | #> |             C             | #>"},{"path":"/reference/get_roots_over.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the root nodes of a graph over some nodes ‚Äî get_roots_over","title":"Get the root nodes of a graph over some nodes ‚Äî get_roots_over","text":"Retrieves nodes graph parents certain node group nodes","code":""},{"path":"/reference/get_roots_over.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the root nodes of a graph over some nodes ‚Äî get_roots_over","text":"","code":"get_roots_over(graph, nodes)"},{"path":"/reference/get_roots_over.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the root nodes of a graph over some nodes ‚Äî get_roots_over","text":"graph graph object nodes character vector nodes find roots ","code":""},{"path":"/reference/get_roots_over.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the root nodes of a graph over some nodes ‚Äî get_roots_over","text":"character vector nodes","code":""},{"path":[]},{"path":"/reference/get_roots_over.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the root nodes of a graph over some nodes ‚Äî get_roots_over","text":"","code":"graph <- graph_builder() |>   add_path(c(\"A\", \"B\", \"C\")) |>   add_path(c(\"A\", \"D\", \"C\")) |>   add_path(c(\"Z\", \"B\", \"C\")) |>   build_directed()  get_roots_over(graph, \"D\") #> # of nodes: 1 #> |           Nodes           | #> |             A             | #>"},{"path":"/reference/graph_builder.html","id":null,"dir":"Reference","previous_headings":"","what":"A new builder for a graph based on the type ‚Äî graph_builder","title":"A new builder for a graph based on the type ‚Äî graph_builder","text":"Object used build graphs","code":""},{"path":"/reference/graph_builder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A new builder for a graph based on the type ‚Äî graph_builder","text":"","code":"graph_builder(type = \"directed\")"},{"path":"/reference/graph_builder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A new builder for a graph based on the type ‚Äî graph_builder","text":"type type graph","code":""},{"path":"/reference/graph_builder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A new builder for a graph based on the type ‚Äî graph_builder","text":"object class 'DirectedGraphBuilder'.","code":""},{"path":[]},{"path":"/reference/graph_builder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A new builder for a graph based on the type ‚Äî graph_builder","text":"","code":"graph_builder() #> <pointer: 0x55e2f6f1ec90> #> attr(,\"class\") #> [1] \"DirectedGraphBuilder\""},{"path":"/reference/graph_from_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the graph from a binary blob ‚Äî graph_from_bin","title":"Read the graph from a binary blob ‚Äî graph_from_bin","text":"Read graph binary blob","code":""},{"path":"/reference/graph_from_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the graph from a binary blob ‚Äî graph_from_bin","text":"","code":"graph_from_bin(path, bin, type = c(\"directed\", \"dag\"))"},{"path":"/reference/graph_from_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the graph from a binary blob ‚Äî graph_from_bin","text":"path (Optional) Path file containing graph binary bin (Optional) raw binary graph type type graph JSON represents","code":""},{"path":"/reference/graph_from_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the graph from a binary blob ‚Äî graph_from_bin","text":"graph object","code":""},{"path":[]},{"path":"/reference/graph_from_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read the graph from a binary blob ‚Äî graph_from_bin","text":"","code":"bin <- graph_builder() |>   add_edge(\"A\", \"B\") |>   build_directed() |>   graph_to_bin() bin #>   [1] 00 00 00 00 0e 00 00 00 78 9c 55 cb 31 0a 84 30 10 85 e1 e4 68 bb b0 c5 9e #>  [26] 42 06 f3 d4 d1 38 09 c9 20 68 67 6e 62 e5 35 0d 58 88 cd 2b 1e df 7f 0e 2c #>  [51] 8a 24 48 85 3e f4 ed 3c 68 41 de 2d 52 08 9a 77 03 09 0e b9 18 eb db 81 bd #>  [76] 4b 90 66 a6 78 b4 75 ca 31 fd 85 95 c9 f3 06 57 93 df 1c 75 1d 23 55 a4 8f #> [101] ba ef b7 35 bd 34 70 3d b2 bd 00 fa e7 33 5b  graph_from_bin(bin = bin) #> # of nodes: 2 #> # of edges: 1 #> # of roots: 1 #> # of leaves: 1 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | A               | B               | #>"},{"path":"/reference/graph_to_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the graph into a binary blob ‚Äî graph_to_bin","title":"Save the graph into a binary blob ‚Äî graph_to_bin","text":"Save graph binary blob","code":""},{"path":"/reference/graph_to_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the graph into a binary blob ‚Äî graph_to_bin","text":"","code":"graph_to_bin(graph, path)"},{"path":"/reference/graph_to_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the graph into a binary blob ‚Äî graph_to_bin","text":"graph graph object path Path file save graph ","code":""},{"path":"/reference/graph_to_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the graph into a binary blob ‚Äî graph_to_bin","text":"Run side-effects","code":""},{"path":[]},{"path":"/reference/graph_to_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the graph into a binary blob ‚Äî graph_to_bin","text":"","code":"graph <- graph_builder() |>   add_edge(\"A\", \"B\") |>   build_directed()  graph_to_bin(graph) #>   [1] 00 00 00 00 0e 00 00 00 78 9c 55 cb 31 0a 84 30 10 85 e1 e4 68 bb b0 c5 9e #>  [26] 42 06 f3 d4 d1 38 09 c9 20 68 67 6e 62 e5 35 0d 58 88 cd 2b 1e df 7f 0e 2c #>  [51] 8a 24 48 85 3e f4 ed 3c 68 41 de 2d 52 08 9a 77 03 09 0e b9 18 eb db 81 bd #>  [76] 4b 90 66 a6 78 b4 75 ca 31 fd 85 95 c9 f3 06 57 93 df 1c 75 1d 23 55 a4 8f #> [101] ba ef b7 35 bd 34 70 3d b2 bd 00 fa e7 33 5b"},{"path":"/reference/has_children.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a node in a graph has children ‚Äî has_children","title":"Checks if a node in a graph has children ‚Äî has_children","text":"function validates node edge pointing node.","code":""},{"path":"/reference/has_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a node in a graph has children ‚Äî has_children","text":"","code":"has_children(graph, nodes)"},{"path":"/reference/has_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a node in a graph has children ‚Äî has_children","text":"graph graph object nodes character vector nodes determine","code":""},{"path":"/reference/has_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a node in a graph has children ‚Äî has_children","text":"logical vector length nodes","code":""},{"path":"/reference/has_children.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a node in a graph has children ‚Äî has_children","text":"","code":"graph <- graph_builder() |>   add_edge(from = \"A\", to = \"B\") |>   build_directed() graph #> # of nodes: 2 #> # of edges: 1 #> # of roots: 1 #> # of leaves: 1 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | A               | B               | #>   graph |> has_children(nodes = \"A\") #> [1] TRUE graph |> has_children(nodes = \"B\") #> [1] FALSE"},{"path":"/reference/has_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if a node in a graph has parents ‚Äî has_parents","title":"Checks if a node in a graph has parents ‚Äî has_parents","text":"function validates edge points given node.","code":""},{"path":"/reference/has_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if a node in a graph has parents ‚Äî has_parents","text":"","code":"has_parents(graph, nodes)"},{"path":"/reference/has_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if a node in a graph has parents ‚Äî has_parents","text":"graph graph object nodes character vector nodes determine","code":""},{"path":"/reference/has_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if a node in a graph has parents ‚Äî has_parents","text":"logical vector length nodes","code":""},{"path":"/reference/has_parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if a node in a graph has parents ‚Äî has_parents","text":"","code":"graph <- graph_builder() |>   add_edge(from = \"A\", to = \"B\") |>   build_directed() graph #> # of nodes: 2 #> # of edges: 1 #> # of roots: 1 #> # of leaves: 1 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | A               | B               | #>   graph |> has_parents(nodes = \"A\") #> [1] FALSE graph |> has_parents(nodes = \"B\") #> [1] TRUE"},{"path":"/reference/least_common_parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the least common parents in a graph ‚Äî least_common_parents","title":"Find the least common parents in a graph ‚Äî least_common_parents","text":"finds nodes parents given set.","code":""},{"path":"/reference/least_common_parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the least common parents in a graph ‚Äî least_common_parents","text":"","code":"least_common_parents(graph, selected)"},{"path":"/reference/least_common_parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the least common parents in a graph ‚Äî least_common_parents","text":"graph graph object selected character vector node ids","code":""},{"path":"/reference/least_common_parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the least common parents in a graph ‚Äî least_common_parents","text":"character vector node ids","code":""},{"path":[]},{"path":"/reference/least_common_parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the least common parents in a graph ‚Äî least_common_parents","text":"","code":"graph_edges <- data.frame(   parent = c(\"A\", \"B\", \"C\", \"C\", \"F\"),   child = c(\"B\", \"C\", \"D\", \"E\", \"D\") )  graph <- graph_builder() |>   populate_edges(graph_edges, parent, child) |>   build_directed() graph #> # of nodes: 6 #> # of edges: 5 #> # of roots: 2 #> # of leaves: 2 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | A               | B               | #> | B               | C               | #> | C               | E               | #> | C               | D               | #> | F               | D               | #>   graph |> least_common_parents(c(\"D\", \"E\")) #> # of nodes: 2 #> |           Nodes           | #> |             D             | #> |             E             | #>"},{"path":"/reference/nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the nodes in the graph ‚Äî nodes","title":"Get the nodes in the graph ‚Äî nodes","text":"Returns unique nodes graph","code":""},{"path":"/reference/nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the nodes in the graph ‚Äî nodes","text":"","code":"nodes(graph, ...)"},{"path":"/reference/nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the nodes in the graph ‚Äî nodes","text":"graph directed directed acyclic graph ... Reserved later use","code":""},{"path":"/reference/nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the nodes in the graph ‚Äî nodes","text":"character vector nodes","code":""},{"path":"/reference/nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the nodes in the graph ‚Äî nodes","text":"","code":"graph <- graph_builder() |>   add_edge(from = \"A\", to = \"B\") |>   build_directed() graph #> # of nodes: 2 #> # of edges: 1 #> # of roots: 1 #> # of leaves: 1 #>  #> |     Parent      |      Child      | #> | --------------- | --------------- | #> | A               | B               | #>   nodes(graph) #> # of nodes: 2 #> |           Nodes           | #> |             A             | #> |             B             | #>"},{"path":"/reference/parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the parents on a node ‚Äî parents","title":"Get the parents on a node ‚Äî parents","text":"Get list node ids parents provided node.","code":""},{"path":"/reference/parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the parents on a node ‚Äî parents","text":"","code":"parents(graph, nodes)"},{"path":"/reference/parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the parents on a node ‚Äî parents","text":"graph graph object nodes character vector nodes find parents ","code":""},{"path":"/reference/parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the parents on a node ‚Äî parents","text":"character vector","code":""},{"path":"/reference/parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the parents on a node ‚Äî parents","text":"","code":"graph <- graph_builder() |>   add_edge(from = \"A\", to = \"B\") |>   build_directed()  graph |> parents(\"A\") #> # of nodes: 0 #> |           Nodes           | #>  graph |> parents(\"B\") #> # of nodes: 1 #> |           Nodes           | #> |             A             | #>"},{"path":"/reference/populate_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Populates the edges of a graph from a data.frame ‚Äî populate_edges","title":"Populates the edges of a graph from a data.frame ‚Äî populate_edges","text":"Adds set edges data.frame graph","code":""},{"path":"/reference/populate_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Populates the edges of a graph from a data.frame ‚Äî populate_edges","text":"","code":"populate_edges(graph_builder, edges_df, parent_col, child_col)"},{"path":"/reference/populate_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Populates the edges of a graph from a data.frame ‚Äî populate_edges","text":"graph_builder graph builder object edges_df data.frame parent child variable parent_col name column containing parents child_col name column containing children","code":""},{"path":"/reference/populate_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Populates the edges of a graph from a data.frame ‚Äî populate_edges","text":"updated graph builder object","code":""},{"path":[]},{"path":"/reference/populate_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Populates the edges of a graph from a data.frame ‚Äî populate_edges","text":"","code":"graph_edges <- data.frame(   parent = c(\"A\", \"B\", \"C\"),   child = c(\"B\", \"C\", \"D\") )  graph_builder() |>   populate_edges(     edges_df = graph_edges,     parent_col = \"parent\",     child_col = \"child\"   ) #> <pointer: 0x55e2f60cd8b0> #> attr(,\"class\") #> [1] \"DirectedGraphBuilder\""},{"path":"/news/index.html","id":"orbweaver-0181","dir":"Changelog","previous_headings":"","what":"orbweaver 0.18.1","title":"orbweaver 0.18.1","text":"CRAN re-submission.","code":""}]
